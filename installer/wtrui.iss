; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Analytics Reporting"
#define MyAppVersion "1.0"
#define MyAppPublisher "Nick McCollum"
#define MyAppURL "https://www.webtrends.com/"
#define SiteName "Analytics Reporting"
#define SiteDirectory = "AnalyticsReporting"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1A006139-78F6-4A47-B750-2C5983712C61}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={sd}\inetpub\{#SiteDirectory}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=license.rtf
InfoAfterFile=after_install.rtf
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=wtr_setup
SetupIconFile=favicon_16_32_64.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
DisableWelcomePage=no
DisableProgramGroupPage=yes
AlwaysShowDirOnReadyPage=yes
SetupLogging=yes
//MinVersion=10

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{src}\app\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs external
Source: "readme.txt"; DestDir: "{app}"; Flags: isreadme
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
// Cannot verify exit code from here.
// If needed, could move this to the CurStepChanged function and run it on CurStep = ssPostInstall, or a combination of CurStepChanged and PrepareToInstall.
Filename: "msiexec.exe"; Parameters: "/i {src}\msi\rewrite_amd64_en-US.msi /qn"; Description: "Install IIS URL Rewrite"; StatusMsg: "Installing IIS URL Rewrite..."; Check: IsIISInstalled; AfterInstall: ConfigureSite()

[Icons]
Name: "{commondesktop}\{#MyAppName}"; Filename: "http://{computername}:{code:GetPortNumber}"; IconFilename: "{app}\favicon.ico";

[CustomMessages]
APIDomain=Data Extraction API Endpoint
A9URL=Analytics 9 URL
PortNum={#SiteName} Port Number

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
const
  // See https://msdn.microsoft.com/en-us/library/windows/desktop/ms681382.aspx
  ERROR_SUCCESS = 0;
  ERROR_INVALID_FUNCTION = 1;
  ERROR_NOT_SUPPORTED = 50;
  ERROR_NOT_FOUND = 1168;
  ERROR_SUCCESS_REBOOT_REQUIRED = 3010;
  // User input default values
  DX_ENDPOINT_DEFAULT = 'https://<myDomain.com>/v2_0/ReportService';
  A9_URL_DEFAULT = 'https://<myDomain.com>:7099';
  PORT_NUMBER_DEFAULT = '8080';
  // Input field length validation
  MIN_STR_LENGTH = 8;
  // Newline character in string
  LINE_BREAK = #13#10;
  
var
  // Custom pages
  InputInfoPage: TInputQueryWizardPage;
  IISInstallPage: TInputOptionWizardPage;
  IISInstallProgressPage, IISConfigurationProgressPage: TOutputMarqueeProgressWizardPage;
  // User inputs
  DxEndpoint, A9Url, PortNumber: String;
  PortNumberInt: Integer;
  // Environment info
  OSVersion: TWindowsVersion;
  IISInstalled: Boolean;
  // IIS features
  DefaultDocument, DirectoryBrowse, HttpErrors, StaticContent, HttpLogging, HttpCompressionStatic, RequestFiltering, ManagementConsole, W3SVC : Cardinal;
  
function GetPortNumber(Param: String): String;
begin
  Result := PortNumber;
end;

function OSVersionCheck(): Boolean;
begin
  GetWindowsVersionEx(OSVersion);
  Result := True;
  // OS versions prior to 10 (Server 2016) are not supported
  if OSVersion.Major < 10 then begin
    MsgBox('Operating system not supported. Windows Server 2016 or higher is required. Setup will now exit.', mbCriticalError, MB_OK);
    Result := False;
  end;
  // Only install on a server OS
  if OSVersion.ProductType = VER_NT_WORKSTATION then begin
    MsgBox('Desktop operating systems are not supported. Setup will now exit.', mbCriticalError, MB_OK);
    Result := False;
  end;
end;

function UserRightsCheck(): Boolean;
begin
  Result := True;
  if not IsAdmin() then begin
    MsgBox('Administrative privileges are required. Setup will now exit.', mbCriticalError, MB_OK);
    Result := False;
  end;
end;

// Check which required IIS features are already installed
// Returns 0 if not installed
procedure IISFeaturesCheck();
begin
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'DefaultDocument', DefaultDocument);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'DirectoryBrowse', DirectoryBrowse);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'HttpErrors', HttpErrors);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'StaticContent', StaticContent);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'HttpLogging', HttpLogging);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'HttpCompressionStatic', HttpCompressionStatic);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'RequestFiltering', RequestFiltering);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'ManagementConsole', ManagementConsole);
  RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\InetStp\Components', 'W3SVC', W3SVC);
  
  Log('-- IIS Installed Features --');
  Log('Default Document: ' + IntToStr(DefaultDocument));
  Log('Directory Browsing: ' + IntToStr(DirectoryBrowse));
  Log('HTTP Errors: ' + IntToStr(HttpErrors));
  Log('Static Content: ' + IntToStr(StaticContent));
  Log('HTTP Logging: ' + IntToStr(HttpLogging));
  Log('Static Content Compressions: ' + IntToStr(HttpCompressionStatic));
  Log('Request Filtering: ' + IntToStr(RequestFiltering));
  Log('IIS Management Console: ' + IntToStr(ManagementConsole));
  Log('World Wide Web Publishing Service: ' + IntToStr(W3SVC));
end;

function IsIISInstalled(): Boolean;
begin
  IISFeaturesCheck();
  if (IISInstalled) or (W3SVC <> 0) then begin
    Result := True;
  end
  else
    Result := False;
end;
  
procedure CreateInputInfoPage();
var
  Index: Integer;
begin
  InputInfoPage := CreateInputQueryPage(wpLicense, 'Configuration', 'Please provide the following configuration information.', 'Update the URLs for your environment. These values are required by the {#SiteName} app. The app will be hosted on the provided port number.');
  Index := InputInfoPage.Add(ExpandConstant('{cm:APIDomain}') + ':', False);
  InputInfoPage.Values[Index] := GetPreviousData('DxEndpoint', DX_ENDPOINT_DEFAULT);
  Index := InputInfoPage.Add(ExpandConstant('{cm:A9URL}') + ':', False);
  InputInfoPage.Values[Index] := GetPreviousData('A9Url', A9_URL_DEFAULT);
  Index := InputInfoPage.Add(ExpandConstant('{cm:PortNum}') + ':', False);
  InputInfoPage.Values[Index] := GetPreviousData('PortNumber', PORT_NUMBER_DEFAULT);
end;

procedure CreateIISInstallPage();
begin
  IISInstallPage := CreateInputOptionPage(wpLicense, 'IIS Installation', 'IIS is required to host the {#MyAppName} user interface.', 'Would you like to install the required features now?', True, False);
  IISInstallPage.Add('&Yes, install IIS for me');
  IISInstallPage.Add('&No, exit setup and I''ll install IIS myself');
  IISInstallPage.Values[1] := True;
end;

procedure CreateIISInstallProgressPage();
begin
  IISInstallProgressPage := CreateOutputMarqueeProgressPage('Installing IIS Features','Required IIS features are being installed.');
end;

procedure CreateIISConfigurationProgressPage();
begin
  IISConfigurationProgressPage := CreateOutputMarqueeProgressPage('Configuring IIS','The IIS website is being created.');
end;

// Installs IIS features
// Returns True if a restart is required. Throws exceptions.
function InstallIIS(): Boolean;
var
  Success: Boolean;
  ResultCode: Integer;
  OldState: Boolean;
begin
  if IsWin64 then begin
    // Turn off redirection, so the command from the 64-bit System directory is launched.
    OldState := EnableFsRedirection(False);
    try
      Success := Exec('Dism', '/Online /Enable-Feature' +
      // Enables everything a fresh install would also (implicitly) enable.
      // This is important in case IIS was already installed and some features manually disabled.
      ' /FeatureName:WAS-WindowsActivationService /FeatureName:WAS-ProcessModel /FeatureName:WAS-NetFxEnvironment /FeatureName:WAS-ConfigurationAPI' +
      ' /FeatureName:IIS-ManagementConsole' +
      ' /FeatureName:IIS-HttpErrors /FeatureName:IIS-DefaultDocument /FeatureName:IIS-StaticContent /FeatureName:IIS-DirectoryBrowsing' +
      ' /FeatureName:IIS-HttpCompressionStatic' +
      ' /FeatureName:IIS-RequestFiltering' +
      ' /FeatureName:IIS-HttpLogging' +
      ' /All',  // Implicitly enables dependent features
      '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    finally
      // Restore the previous redirection state.
      EnableFsRedirection(OldState);
    end;
  end;
  if not Success or ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_SUCCESS_REBOOT_REQUIRED)) then begin
    Log('Cannot install IIS: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot install IIS: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  Result := ResultCode = ERROR_SUCCESS_REBOOT_REQUIRED;
end;

// Uninstalls IIS
// Returns True if a restart is required. Throws exceptions.
function UninstallIIS(): Boolean;
var
  Success: Boolean;
  ResultCode: Integer;
begin
  Success := Exec('Dism', '/NoRestart /Online /Disable-Feature /FeatureName:IIS-WebServerRole', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  if not Success or ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_SUCCESS_REBOOT_REQUIRED)) then
    RaiseException('Cannot uninstall IIS: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  Result := ResultCode = ERROR_SUCCESS_REBOOT_REQUIRED;
end;

// Exec with output stored in result. ResultString will only be altered if True is returned.
// https://stackoverflow.com/questions/11830183/inno-setup-iis-installation-and-configuration
function ExecWithResult(const Filename, Params, WorkingDir: String; const ShowCmd: Integer; const Wait: TExecWait; var ResultCode: Integer; var ResultString: String): Boolean;
var
  TempFilename: String;
  TempAnsiStr: AnsiString;
  Command: String;
begin
  TempFilename := ExpandConstant('{tmp}\~execwithresult.txt');
  // Exec via cmd and redirect output to file. Must use special string-behavior to work.
  Command := Format('"%s" /S /C ""%s" %s > "%s""', [ExpandConstant('{cmd}'), Filename, Params, TempFilename]);
  Log(Format('Running command: %s %s', [Filename, Params]));
  Result := Exec(ExpandConstant('{cmd}'), Command, WorkingDir, ShowCmd, Wait, ResultCode);
  if not Result then
    Exit;
  LoadStringFromFile(TempFilename, TempAnsiStr);  // Cannot fail
  ResultString := String(TempAnsiStr);
  DeleteFile(TempFilename);
  // Remove new-line at the end
  if (Length(ResultString) >= 2) and (ResultString[Length(ResultString) - 1] = #13) and (ResultString[Length(ResultString)] = #10) then
    Delete(ResultString, Length(ResultString) - 1, 2);
  Log('Command result: ' + ResultString);
end;

// Execute appcmd.exe commands
// https://stackoverflow.com/questions/11830183/inno-setup-iis-installation-and-configuration
function IISExecAppCmd(Params: String; var ResultString: String; var ResultCode: Integer): Boolean;
var
  AppCmdFilePath: String;
begin
  AppCmdFilePath := ExpandConstant('{sys}\inetsrv\appcmd.exe');
  Result := ExecWithResult(AppCmdFilePath, Params, '', SW_HIDE, ewWaitUntilTerminated, ResultCode, ResultString);
end;

// Returns the IIS site ID for the provided site name
function GetSiteID(const IISSiteName: String): Integer;
var
  ResultCode: Integer;
  ExecResult: String;
begin
  if not IISExecAppCmd(Format('list site /name:"%s" /text:id', [IISSiteName]), ExecResult, ResultCode) then begin
    RaiseException(Format('Cannot get ID of web-site #%s: ', [IISSiteName]) + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  if (Length(Trim(ExecResult)) = 0) then begin
    RaiseException(Format('Web-site %s not found.', [IISSiteName]));
  end;
  Result := StrToInt(Trim(ExecResult));
end;

// Checks if an existing IIS site is using the provided port.
// Returns the name of the first site using the port, otherwise an empty string.
function CheckIfPortUsed(const PortNumber: String): String;
var
  ResultCode: Integer;
  IISSiteBindings: String;
  IISSiteName: String;
begin
  IISExecAppCmd(Format('list sites /text:bindings | findstr :%s:', [PortNumber]), IISSiteBindings, ResultCode);
  // Multiple sites could use the port. We're only going to get the first one.
  Delete(IISSiteBindings, Pos(LINE_BREAK, IISSiteBindings), 99);
  if Length(IISSiteBindings) > 0 then
    IISExecAppCmd(Format('list sites /bindings:%s /text:name', [IISSiteBindings]), IISSiteName, ResultCode);
  if not SameText(IISSiteName, '{#SiteName}') then
    Result := IISSiteName;
end;

// Creates a new IIS site, or replaces an existing site of the same name
procedure CreateIISSite(const IISSiteName: String; const IISPort: Integer; const IISPhysicalPath: String);
var
  ResultCode: Integer;
  ExecResult: String;
begin
  Log('-- Create IIS Site --');
  // Delete the site if it already exists
  if not IISExecAppCmd(Format('delete site "%s"', [IISSiteName]), ExecResult, ResultCode) or
    ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_NOT_FOUND) and (ResultCode <> ERROR_NOT_SUPPORTED)) then begin
    Log('Cannot delete site: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot delete site: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  // Create the site
  if not IISExecAppCmd(Format('add site /name:"%s" /bindings:http/*:%d: /physicalPath:"%s"', [IISSiteName, IISPort, IISPhysicalPath]), ExecResult, ResultCode) or (ResultCode <> ERROR_SUCCESS) then begin
    Log('Cannot add site: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot add site: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
end;

// Deletes an IIS site
procedure DeleteIISSite(const IISSiteName: String);
var
  ResultCode: Integer;
  ExecResult: String;
begin
  Log('-- Delete IIS Site --');
  // Delete the site
  if not IISExecAppCmd(Format('delete site "%s"', [IISSiteName]), ExecResult, ResultCode) or
    ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_NOT_FOUND) and (ResultCode <> ERROR_NOT_SUPPORTED)) then begin
    Log('Cannot delete site: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot delete site: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
end;

// Creates an IIS application pool and adds the root app for the provided site ID
// Throws exceptions.
procedure RegisterIISApp(const IISAppName: String; const IISSiteID: Integer; const IISApplicationPoolName: String);
var
  ResultCode: Integer;
  ExecResult: String;
  WebSiteName: String;
begin
  Log('-- Create IIS App --');
  // Get name of web-site
  if not IISExecAppCmd(Format('list site /id:%d /text:name', [IISSiteID]), ExecResult, ResultCode) then begin
    Log(Format('Cannot get name of web-site #%d: ', [IISSiteID]) + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException(Format('Cannot get name of web-site #%d: ', [IISSiteID]) + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  if (Length(Trim(ExecResult)) = 0) then begin
    Log(Format('Web-site #%d not found.', [IISSiteID]));
    RaiseException(Format('Web-site #%d not found.', [IISSiteID]));
  end;
  WebSiteName := ExecResult;
  // Check if the application pool already exists
  if not IISExecAppCmd(Format('list apppool "%s" /text:name', [IISApplicationPoolName]), ExecResult, ResultCode) or
    ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_INVALID_FUNCTION)) then begin
    Log('Cannot list application pools: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot list application pools: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  // Create the application pool
  if (ExecResult <> IISApplicationPoolName) then
  begin
    if not IISExecAppCmd(Format('add apppool /name:"%s"', [IISApplicationPoolName]), ExecResult, ResultCode) or (ResultCode <> ERROR_SUCCESS) then begin
      Log('Cannot add application pool: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
      RaiseException('Cannot add application pool: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    end;
  end;
  // Add the app to the application pool
  if not IISExecAppCmd(Format('set app "%s/" /applicationPool:"%s"', [WebSiteName, IISApplicationPoolName]), ExecResult, ResultCode) or
    (ResultCode <> ERROR_SUCCESS) then begin
    Log('Cannot change application pools: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot change application pools: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
end;

// Deletes an IIS application pool and app for the provided site ID
// Throws exceptions.
procedure DeleteIISApp(const IISAppName: String; const IISSiteID: Integer; const IISApplicationPoolName: String);
var
  ResultCode: Integer;
  ExecResult: String;
  WebSiteName: String;
begin
  Log('-- Delete IIS App --');
  // Get name of web-site
  if not IISExecAppCmd(Format('list site /id:%d /text:name', [IISSiteID]), ExecResult, ResultCode) then begin
    Log(Format('Cannot get name of web-site #%d: ', [IISSiteID]) + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException(Format('Cannot get name of web-site #%d: ', [IISSiteID]) + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  if (Length(Trim(ExecResult)) = 0) then begin
    Log(Format('Web-site #%d not found.', [IISSiteID]));
    RaiseException(Format('Web-site #%d not found.', [IISSiteID]));
  end;
  WebSiteName := ExecResult;
  // Delete the application
  if not IISExecAppCmd(Format('delete app "%s/%s"', [WebSiteName, IISAppName]), ExecResult, ResultCode) or
    ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_NOT_FOUND) and (ResultCode <> ERROR_NOT_SUPPORTED)) then begin
    Log('Cannot delete application: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot delete application: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
  // Delete the application pool
  if not IISExecAppCmd(Format('delete apppool "%s"', [IISApplicationPoolName]), ExecResult, ResultCode) or
    ((ResultCode <> ERROR_SUCCESS) and (ResultCode <> ERROR_NOT_FOUND)) then begin
    Log('Cannot delete application pool: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
    RaiseException('Cannot delete application pool: ' + SysErrorMessage(ResultCode) + ' (' + IntToStr(ResultCode) + ')');
  end;
end;

// Writes the config.js file
procedure ConfigureSite();
var
   FileContents: array[0..3] of string;
begin
  FileContents[0] := 'window["config"] = {';
  FileContents[1] := '  DX_ENDPOINT: "' + DxEndpoint + '",';
  FileContents[2] := '  A9_URL: "' + A9URL + '",';
  FileContents[3] := '};';
  if not SaveStringsToUTF8File(ExpandConstant('{app}') + '\config.js', FileContents, False) then begin
    Log('Cannot write config.js');
    RaiseException('Cannot write config.js');
  end;
end;

function InitializeSetup(): Boolean;
begin
  Result := True;
  if not OSVersionCheck() or not UserRightsCheck() then begin
    Result := False;
  end;
  IISInstalled := IsIISInstalled();
end;

procedure DeinitializeSetup();
begin
  Log('-- Configuration Values --');
  Log('DX endpoint: ' + DxEndpoint);
  Log('A9 URL: ' + A9URL);
  Log('IIS website name: {#SiteName}');
  Log('IIS website URL: http://' + ExpandConstant('{computername}') + ':' + PortNumber);
end;
  
procedure InitializeWizard();
begin
  CreateInputInfoPage();
  CreateIISInstallProgressPage();
  CreateIISConfigurationProgressPage();
  CreateIISInstallPage();
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  SiteWithSamePort: String;
begin
  Result := True;
  // Validate input on InputInfoPage
  if CurPageID = InputInfoPage.ID then begin
    DxEndpoint := RemoveBackslashUnlessRoot(Trim(Lowercase(InputInfoPage.Values[0])));
    A9Url := Trim(Lowercase(InputInfoPage.Values[1]));
    PortNumber := InputInfoPage.Values[2];
    PortNumberInt := StrToIntDef(PortNumber, -1);
    if (Length(DxEndpoint) < MIN_STR_LENGTH) or (Pos('http', DxEndpoint) = 0) or (SameText(DxEndpoint, DX_ENDPOINT_DEFAULT)) then begin
      MsgBox('Please provide a valid ' + ExpandConstant('{cm:APIDomain}') + ' URL.', mbError, MB_OK);
      WizardForm.Activecontrol := InputInfoPage.Edits[0];
      Result := False;
    end;
    if (Length(A9Url) < MIN_STR_LENGTH) or (Pos('http', A9Url) = 0) or (SameText(A9URL, A9_URL_DEFAULT)) then begin
      MsgBox('Please provide a valid ' + ExpandConstant('{cm:A9URL}') + ' (protocol + hostname + port).', mbError, MB_OK);
      WizardForm.Activecontrol := InputInfoPage.Edits[1];
      Result := False;
    end;
    if (PortNumberInt = -1) or (PortNumberInt < 0) or (PortNumberInt > 65535) then begin
      MsgBox('Please provide a valid ' + ExpandConstant('{cm:PortNum}') + '.', mbError, MB_OK);
      WizardForm.Activecontrol := InputInfoPage.Edits[2];
      Result := False;
    end;
    SiteWithSamePort := CheckIfPortUsed(PortNumber);
    if Length(SiteWithSamePort) > 0 then begin
      MsgBox('Port ' + PortNumber + ' is already used by ' + SiteWithSamePort + '. Please provide a different port.', mbError, MB_OK);
      WizardForm.Activecontrol := InputInfoPage.Edits[2];
      Result := False;
    end;
  end;
  
  // Exit setup if user does not want to install IIS
  if CurPageID = IISInstallPage.ID then begin
    if IISInstallPage.Values[0] then begin
      Result := True;
    end
    else begin
      Result := False;
      WizardForm.Close;
    end;
  end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  // Don't prompt the user if IIS is already installed
  if (PageID = IISInstallPage.ID) and (IISInstalled = True) then
    Result := True
  else
    Result := False;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
  S: String;
begin
  S := '';
  S := S + ExpandConstant('{cm:APIDomain}') + ':' + NewLine;
  S := S + Space + DxEndpoint + NewLine;
  S := S + NewLine;
  
  S := S + ExpandConstant('{cm:A9URL}') + ':' + NewLine;
  S := S + Space + A9Url + NewLine;
  S := S + NewLine;
  
  S := S + 'IIS features:' + NewLine;
  if (DefaultDocument = 0) or (DirectoryBrowse = 0) or (HttpErrors = 0) or (StaticContent = 0) then begin
    S := S + Space + 'Common HTTP Features:' + NewLine;
    if DefaultDocument = 0 then
      S := S + Space + Space + 'Default Document' + NewLine;
    if DirectoryBrowse = 0 then
      S := S + Space + Space + 'Directory Browsing' + NewLine;
    if HttpErrors = 0 then
      S := S + Space + Space + 'HTTP Errors' + NewLine;
    if StaticContent = 0 then
      S := S + Space + Space + 'Static Content' + NewLine;
  end;
  if HttpLogging = 0 then begin
    S := S + Space + 'Health and Diagnostics:' + NewLine;
    S := S + Space + Space + 'HTTP Logging' + NewLine;
  end;
  if HttpCompressionStatic = 0 then begin
    S := S + Space + 'Performance:' + NewLine;
    S := S + Space + Space + 'Static Content Compressions' + NewLine;
  end;
  if RequestFiltering = 0 then begin
    S := S + Space + 'Security:' + NewLine;
    S := S + Space + Space + 'Request Filtering' + NewLine;
  end;
  if ManagementConsole = 0 then begin
    S := S + Space + 'Management Tools:' + NewLine;
    S := S + Space + Space + 'IIS Management Console' + NewLine;
  end;
  S := S + Space + 'Additional Modules:' + NewLine;
  S := S + Space + Space + 'URL Rewrite 2.1' + NewLine;
  S := S + NewLine;
  
  S := S + 'IIS website name:' + NewLine;
  S := S + Space + '{#SiteName}' + NewLine;
  S := S + NewLine;
  
  S := S + 'IIS website URL:' + NewLine;
  S := S + Space + 'http://' + ExpandConstant('{computername}') + ':' + PortNumber + NewLine;
  S := S + NewLine;
  
  S := S + MemoDirInfo;

  Result := S;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  SiteID: Integer;
  ResultCode: Integer;
  ExecResult: String;
begin
  // Install any missing IIS features
  IISInstallProgressPage.Animate();
  IISInstallProgressPage.Show;
  try
    InstallIIS();
  except
    Result := 'IIS feature installation failed.';
  finally
    IISInstallProgressPage.Hide;
  end;
  
  // Stop default site if necessary to avoid a port number conflict
  if (IISInstalled = False) and (PortNumberInt = 80) then begin
    if not IISExecAppCmd('stop sites "Default Web Site"', ExecResult, ResultCode) then begin
      Log('Unable to stop Default Web Site.');
      MsgBox('Unable to stop Default Web Site, which is already using port 80. Please stop the site or change its port number after installation is complete.', mbError, MB_OK);
    end;
  end;
  
  // Add the site and app pool
  IISConfigurationProgressPage.Animate();
  IISConfigurationProgressPage.Show;
  try
    CreateIISSite('{#SiteName}', PortNumberInt, ExpandConstant('{app}'));
    SiteID := GetSiteID('{#SiteName}');
    RegisterIISApp('{#SiteName}', SiteID, '{#SiteName}');
  except
    Result := 'IIS configuration failed.';
  finally
    IISConfigurationProgressPage.Hide;
  end;
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
  SetPreviousData(PreviousDataKey, 'DxEndpoint', InputInfoPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'A9Url', InputInfoPage.Values[1]);
  SetPreviousData(PreviousDataKey, 'PortNumber', InputInfoPage.Values[2]);
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  SiteID: Integer;
begin
  // Remove the IIS app, app pool, and site
  // IIS features will not be removed, in case other sites are using them
  if CurUninstallStep = usPostUninstall then begin
    SiteID := GetSiteID('{#SiteName}');
    DeleteIISApp('{#SiteName}', SiteID, '{#SiteName}');
    DeleteIISSite('{#SiteName}');
  end;
end;
